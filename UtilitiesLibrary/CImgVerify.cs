using System;
using System.Drawing.Imaging;
using System.Drawing;
using System.Drawing.Design;
using System.Drawing.Text;
using System.Security.Cryptography;
using System.Web.UI;
using System.Web;
    /// ************************************************************************
    /// CImgVerify.cs - Random string generator and image convertor
    /// Developed by Vadivel Kumar
    /// vadivtk@yahoo.com
    /// ************************************************************************
namespace UtilitiesLibrary
{

    /// <summary>
    /// Summary description for CImgVerify.
    /// This class can be used to generate dynamic generation of Alphanumeric strings
    /// and it can be displayed as images in the webbrowser.
    /// 
    /// Use this code at your own :). I didn't tested properly and I hope i can 
    /// release a final tested versions of this code in future.
    /// 
    /// Thanks Guys!!
    /// </summary>
    public class CImgVerify
    {
        /// <summary>
        /// The constructor will not do anything!
        /// </summary>
        public CImgVerify()
        { }

        /// <summary>
        /// The function <c>getRandomAlphaNumeric</c> will return the string
        /// generated by the <c>RandomNumberGenerator</c> class. This will be used
        /// to make the string value. The function will check whether the randomnly
        /// generated numerics are falling into 32 to 127 for making
        /// it as a character. If the value returned is not in the range
        /// then that we will be used as it is. By default, the randomnly generated number 
        /// array will hold 3 elements.
        /// </summary>
        /// <returns>string value, which is  the randomnly generated alphanumeric value</returns>
        public string getRandomAlphaNumeric()
        {

            RandomNumberGenerator rm = RandomNumberGenerator.Create();

            byte[] data = new byte[2];

            rm.GetNonZeroBytes(data);

            string sRand = "";
            string sTmp = "";

            for (int nCnt = 0; nCnt <= data.Length - 1; nCnt++)
            {
                int nVal = Convert.ToInt32(data.GetValue(nCnt));

                if (nVal > 47 && nVal < 58)
                {
                    sTmp = Convert.ToChar(nVal).ToString();
                }
                else
                {
                    sTmp = nVal.ToString();
                }

                sRand += sTmp.ToString();
            }

            return sRand;
        }
        public string GetRandomText()
        {
            string uniqueID = Guid.NewGuid().ToString();
            string randString = "";
            for (int i = 0, j = 0; i < uniqueID.Length && j < 5; i++)
            {
                char l_ch = uniqueID.ToCharArray()[i];
                if ((l_ch >= '0' && l_ch <= '9'))
                {
                    randString += l_ch;
                    j++;
                }
            }
            return randString;
        }

        /// <summary>
        /// Ooops!! I'm too tired to make documentation of this. I think, it is 
        /// possible to add more features to this function. 
        /// 
        /// Let me add doc. later after some time!
        /// </summary>
        /// <param name="sTextToImg">The text which has to be generated as a image</param>
        /// <returns></returns>
        public Bitmap generateImage(string sTextToImg)
        {
            //
            // Here, i haven't used any try..catch 
            //
            Bitmap bmp = new Bitmap(180, 40);
            Graphics g = Graphics.FromImage(bmp);

            string randString = sTextToImg;
            g.FillRectangle(Brushes.WhiteSmoke, 0, 0, 180, 40);
            g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.Default;
            g.TextRenderingHint = System.Drawing.Text.TextRenderingHint.AntiAlias;

            Random rand = new Random();
            for (int i = 0; i < randString.Length; i++)
            {
                Font drawFont = new Font("Arial", 18, FontStyle.Italic | (rand.Next() % 2 == 0 ? FontStyle.Bold : FontStyle.Regular));
                g.DrawString(randString.Substring(i, 1), drawFont, Brushes.Black, i * 35 + 10, rand.Next() % 12);
            }
            
            //PixelFormat pxImagePattern = PixelFormat.Format32bppArgb;
            //Bitmap bmpImage = new Bitmap(1, 1, pxImagePattern);
            //Font fntImageFont = new Font("Trebuchets", 14);
            //Graphics gdImageGrp = Graphics.FromImage(bmpImage);

            //float iWidth = gdImageGrp.MeasureString(sTextToImg, fntImageFont).Width;
            //float iHeight = gdImageGrp.MeasureString(sTextToImg, fntImageFont).Height;

            //bmpImage = new Bitmap((int)iWidth, (int)iHeight, pxImagePattern);

            //gdImageGrp = Graphics.FromImage(bmpImage);
            //gdImageGrp.Clear(Color.White);

            //gdImageGrp.TextRenderingHint = TextRenderingHint.AntiAlias;

            //gdImageGrp.DrawString(sTextToImg, fntImageFont, new SolidBrush(Color.Red), 0, 0);
            //gdImageGrp.Flush();

            return bmp;

        }
    }
}


